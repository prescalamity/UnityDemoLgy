//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_AI_NavMeshPathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.AI.NavMeshPath), typeof(System.Object), "NavMeshPath");
		L.RegFunction("GetCornersNonAlloc", GetCornersNonAlloc);
		L.RegFunction("ClearCorners", ClearCorners);
		L.RegFunction("New", _CreateUnityEngine_AI_NavMeshPath);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("corners", get_corners, null);
		L.RegVar("status", get_status, null);
		L.RegFunction("GetClassType", GetClassType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_AI_NavMeshPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.AI.NavMeshPath obj = new UnityEngine.AI.NavMeshPath();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.AI.NavMeshPath.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	static Type classType = typeof(UnityEngine.AI.NavMeshPath);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCornersNonAlloc(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMeshPath.GetCornersNonAlloc");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AI.NavMeshPath obj = (UnityEngine.AI.NavMeshPath)ToLua.CheckObject(L, 1, typeof(UnityEngine.AI.NavMeshPath));
			UnityEngine.Vector3[] arg0 = ToLua.CheckObjectArray<UnityEngine.Vector3>(L, 2);
			int o = obj.GetCornersNonAlloc(arg0);
			LuaDLL.lua_pushinteger(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCorners(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMeshPath.ClearCorners");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AI.NavMeshPath obj = (UnityEngine.AI.NavMeshPath)ToLua.CheckObject(L, 1, typeof(UnityEngine.AI.NavMeshPath));
			obj.ClearCorners();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_corners(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMeshPath.corners");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.AI.NavMeshPath obj = (UnityEngine.AI.NavMeshPath)o;
			UnityEngine.Vector3[] ret = obj.corners;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index corners on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_status(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMeshPath.status");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.AI.NavMeshPath obj = (UnityEngine.AI.NavMeshPath)o;
			UnityEngine.AI.NavMeshPathStatus ret = obj.status;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index status on a nil value" : e.Message);
		}
	}
}

