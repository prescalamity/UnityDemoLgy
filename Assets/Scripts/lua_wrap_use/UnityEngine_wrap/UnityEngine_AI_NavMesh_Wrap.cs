//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_AI_NavMeshWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("NavMesh");
		L.RegFunction("Raycast", Raycast);
		L.RegFunction("CalculatePath", CalculatePath);
		L.RegFunction("FindClosestEdge", FindClosestEdge);
		L.RegFunction("SamplePosition", SamplePosition);
		L.RegFunction("SetAreaCost", SetAreaCost);
		L.RegFunction("GetAreaCost", GetAreaCost);
		L.RegFunction("GetAreaFromName", GetAreaFromName);
		L.RegFunction("CalculateTriangulation", CalculateTriangulation);
		L.RegFunction("AddNavMeshData", AddNavMeshData);
		L.RegFunction("RemoveNavMeshData", RemoveNavMeshData);
		L.RegFunction("AddLink", AddLink);
		L.RegFunction("RemoveLink", RemoveLink);
		L.RegFunction("CreateSettings", CreateSettings);
		L.RegFunction("RemoveSettings", RemoveSettings);
		L.RegFunction("GetSettingsByID", GetSettingsByID);
		L.RegFunction("GetSettingsCount", GetSettingsCount);
		L.RegFunction("GetSettingsByIndex", GetSettingsByIndex);
		L.RegFunction("GetSettingsNameFromID", GetSettingsNameFromID);
		L.RegFunction("RemoveAllNavMeshData", RemoveAllNavMeshData);
		L.RegConstant("AllAreas", -1);
		L.RegVar("onPreUpdate", get_onPreUpdate, set_onPreUpdate);
		L.RegVar("avoidancePredictionTime", get_avoidancePredictionTime, set_avoidancePredictionTime);
		L.RegVar("pathfindingIterationsPerFrame", get_pathfindingIterationsPerFrame, set_pathfindingIterationsPerFrame);
		L.RegFunction("OnNavMeshPreUpdate", UnityEngine_AI_NavMesh_OnNavMeshPreUpdate);
		L.RegFunction("GetClassType", GetClassType);
		L.EndStaticLibs();
	}

	static Type classType = typeof(UnityEngine.AI.NavMesh);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.Raycast");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(LuaInterface.LuaOut<UnityEngine.AI.NavMeshHit>), typeof(int)))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.AI.NavMeshHit arg2;
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				bool o = UnityEngine.AI.NavMesh.Raycast(arg0, arg1, out arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg2);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(LuaInterface.LuaOut<UnityEngine.AI.NavMeshHit>), typeof(UnityEngine.AI.NavMeshQueryFilter)))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.AI.NavMeshHit arg2;
				UnityEngine.AI.NavMeshQueryFilter arg3 = StackTraits<UnityEngine.AI.NavMeshQueryFilter>.To(L, 4);
				bool o = UnityEngine.AI.NavMesh.Raycast(arg0, arg1, out arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg2);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.AI.NavMesh.Raycast");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculatePath(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.CalculatePath");
#endif
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.AI.NavMeshPath arg3 = (UnityEngine.AI.NavMeshPath)ToLua.CheckObject(L, 4, typeof(UnityEngine.AI.NavMeshPath));
			bool o = UnityEngine.AI.NavMesh.CalculatePath(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindClosestEdge(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.FindClosestEdge");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Vector3), typeof(LuaInterface.LuaOut<UnityEngine.AI.NavMeshHit>), typeof(int)))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.AI.NavMeshHit arg1;
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = UnityEngine.AI.NavMesh.FindClosestEdge(arg0, out arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Vector3), typeof(LuaInterface.LuaOut<UnityEngine.AI.NavMeshHit>), typeof(UnityEngine.AI.NavMeshQueryFilter)))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.AI.NavMeshHit arg1;
				UnityEngine.AI.NavMeshQueryFilter arg2 = StackTraits<UnityEngine.AI.NavMeshQueryFilter>.To(L, 3);
				bool o = UnityEngine.AI.NavMesh.FindClosestEdge(arg0, out arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.AI.NavMesh.FindClosestEdge");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SamplePosition(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.SamplePosition");
#endif
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.AI.NavMeshHit arg1;
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			bool o = UnityEngine.AI.NavMesh.SamplePosition(arg0, out arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAreaCost(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.SetAreaCost");
#endif
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.AI.NavMesh.SetAreaCost(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAreaCost(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetAreaCost");
#endif
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			float o = UnityEngine.AI.NavMesh.GetAreaCost(arg0);
			LuaDLL.lua_pushnumber(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAreaFromName(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetAreaFromName");
#endif
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = UnityEngine.AI.NavMesh.GetAreaFromName(arg0);
			LuaDLL.lua_pushinteger(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTriangulation(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.CalculateTriangulation");
#endif
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.AI.NavMeshTriangulation o = UnityEngine.AI.NavMesh.CalculateTriangulation();
			ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddNavMeshData(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.AddNavMeshData");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.AI.NavMeshData arg0 = (UnityEngine.AI.NavMeshData)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AI.NavMeshData));
				UnityEngine.AI.NavMeshDataInstance o = UnityEngine.AI.NavMesh.AddNavMeshData(arg0);
				ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.AI.NavMeshData arg0 = (UnityEngine.AI.NavMeshData)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AI.NavMeshData));
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.AI.NavMeshDataInstance o = UnityEngine.AI.NavMesh.AddNavMeshData(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.AI.NavMesh.AddNavMeshData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveNavMeshData(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.RemoveNavMeshData");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AI.NavMeshDataInstance arg0 = StackTraits<UnityEngine.AI.NavMeshDataInstance>.Check(L, 1);
			UnityEngine.AI.NavMesh.RemoveNavMeshData(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLink(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.AddLink");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.AI.NavMeshLinkData arg0 = StackTraits<UnityEngine.AI.NavMeshLinkData>.Check(L, 1);
				UnityEngine.AI.NavMeshLinkInstance o = UnityEngine.AI.NavMesh.AddLink(arg0);
				ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.AI.NavMeshLinkData arg0 = StackTraits<UnityEngine.AI.NavMeshLinkData>.Check(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
				UnityEngine.AI.NavMeshLinkInstance o = UnityEngine.AI.NavMesh.AddLink(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.AI.NavMesh.AddLink");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLink(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.RemoveLink");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.AI.NavMeshLinkInstance arg0 = StackTraits<UnityEngine.AI.NavMeshLinkInstance>.Check(L, 1);
			UnityEngine.AI.NavMesh.RemoveLink(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateSettings(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.CreateSettings");
#endif
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.AI.NavMeshBuildSettings o = UnityEngine.AI.NavMesh.CreateSettings();
			ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSettings(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.RemoveSettings");
#endif
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.AI.NavMesh.RemoveSettings(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSettingsByID(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetSettingsByID");
#endif
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.AI.NavMeshBuildSettings o = UnityEngine.AI.NavMesh.GetSettingsByID(arg0);
			ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSettingsCount(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetSettingsCount");
#endif
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.AI.NavMesh.GetSettingsCount();
			LuaDLL.lua_pushinteger(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSettingsByIndex(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetSettingsByIndex");
#endif
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.AI.NavMeshBuildSettings o = UnityEngine.AI.NavMesh.GetSettingsByIndex(arg0);
			ToLua.PushValue(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSettingsNameFromID(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.GetSettingsNameFromID");
#endif
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = UnityEngine.AI.NavMesh.GetSettingsNameFromID(arg0);
			LuaDLL.lua_pushstring(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllNavMeshData(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.RemoveAllNavMeshData");
#endif
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.AI.NavMesh.RemoveAllNavMeshData();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPreUpdate(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.AI.NavMesh.onPreUpdate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_avoidancePredictionTime(IntPtr L)
	{
		LuaDLL.lua_pushnumber(L, UnityEngine.AI.NavMesh.avoidancePredictionTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathfindingIterationsPerFrame(IntPtr L)
	{
		LuaDLL.lua_pushinteger(L, UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPreUpdate(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.onPreUpdate");
#endif
			UnityEngine.AI.NavMesh.OnNavMeshPreUpdate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (UnityEngine.AI.NavMesh.OnNavMeshPreUpdate)ToLua.CheckObject(L, 2, typeof(UnityEngine.AI.NavMesh.OnNavMeshPreUpdate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(UnityEngine.AI.NavMesh.OnNavMeshPreUpdate), func) as UnityEngine.AI.NavMesh.OnNavMeshPreUpdate;
			}

			UnityEngine.AI.NavMesh.onPreUpdate = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_avoidancePredictionTime(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.avoidancePredictionTime");
#endif
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.AI.NavMesh.avoidancePredictionTime = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pathfindingIterationsPerFrame(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame");
#endif
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.AI.NavMesh.pathfindingIterationsPerFrame = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_AI_NavMesh_OnNavMeshPreUpdate(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.AI.NavMesh.OnNavMeshPreUpdate), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

