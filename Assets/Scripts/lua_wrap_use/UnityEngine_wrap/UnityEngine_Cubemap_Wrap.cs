//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_CubemapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Cubemap), typeof(UnityEngine.Texture), "Cubemap");
		L.RegFunction("UpdateExternalTexture", UpdateExternalTexture);
		L.RegFunction("SmoothEdges", SmoothEdges);
		L.RegFunction("GetPixels", GetPixels);
		L.RegFunction("SetPixels", SetPixels);
		L.RegFunction("ClearRequestedMipmapLevel", ClearRequestedMipmapLevel);
		L.RegFunction("IsRequestedMipmapLevelLoaded", IsRequestedMipmapLevelLoaded);
		L.RegFunction("CreateExternalTexture", CreateExternalTexture);
		L.RegFunction("SetPixel", SetPixel);
		L.RegFunction("GetPixel", GetPixel);
		L.RegFunction("Apply", Apply);
		L.RegFunction("New", _CreateUnityEngine_Cubemap);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("format", get_format, null);
		L.RegVar("isReadable", get_isReadable, null);
		L.RegVar("streamingMipmaps", get_streamingMipmaps, null);
		L.RegVar("streamingMipmapsPriority", get_streamingMipmapsPriority, null);
		L.RegVar("requestedMipmapLevel", get_requestedMipmapLevel, set_requestedMipmapLevel);
		L.RegVar("desiredMipmapLevel", get_desiredMipmapLevel, null);
		L.RegVar("loadingMipmapLevel", get_loadingMipmapLevel, null);
		L.RegVar("loadedMipmapLevel", get_loadedMipmapLevel, null);
		L.RegFunction("GetClassType", GetClassType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Cubemap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(UnityEngine.Experimental.Rendering.DefaultFormat), typeof(UnityEngine.Experimental.Rendering.TextureCreationFlags)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Experimental.Rendering.DefaultFormat arg1 = (UnityEngine.Experimental.Rendering.DefaultFormat)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Experimental.Rendering.TextureCreationFlags arg2 = (UnityEngine.Experimental.Rendering.TextureCreationFlags)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Cubemap obj = new UnityEngine.Cubemap(arg0, arg1, arg2);
				ToLua.Push(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(UnityEngine.Experimental.Rendering.GraphicsFormat), typeof(UnityEngine.Experimental.Rendering.TextureCreationFlags)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Experimental.Rendering.GraphicsFormat arg1 = (UnityEngine.Experimental.Rendering.GraphicsFormat)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Experimental.Rendering.TextureCreationFlags arg2 = (UnityEngine.Experimental.Rendering.TextureCreationFlags)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Cubemap obj = new UnityEngine.Cubemap(arg0, arg1, arg2);
				ToLua.Push(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(UnityEngine.TextureFormat), typeof(int)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.TextureFormat arg1 = (UnityEngine.TextureFormat)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Cubemap obj = new UnityEngine.Cubemap(arg0, arg1, arg2);
				ToLua.Push(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(UnityEngine.TextureFormat), typeof(bool)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.TextureFormat arg1 = (UnityEngine.TextureFormat)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Cubemap obj = new UnityEngine.Cubemap(arg0, arg1, arg2);
				ToLua.Push(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.Experimental.Rendering.GraphicsFormat arg1 = (UnityEngine.Experimental.Rendering.GraphicsFormat)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Experimental.Rendering.TextureCreationFlags arg2 = (UnityEngine.Experimental.Rendering.TextureCreationFlags)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Cubemap obj = new UnityEngine.Cubemap(arg0, arg1, arg2, arg3);
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Cubemap.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	static Type classType = typeof(UnityEngine.Cubemap);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateExternalTexture(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.UpdateExternalTexture");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
			System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 2);
			obj.UpdateExternalTexture(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothEdges(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.SmoothEdges");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				obj.SmoothEdges();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.SmoothEdges(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.SmoothEdges");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPixels(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.GetPixels");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color[] o = obj.GetPixels(arg0);
				ToLua.Push(L, o);
				int arrayLength = o.Length;
				LuaScriptMgr.Push(L, arrayLength);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else if (count == 3)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Color[] o = obj.GetPixels(arg0, arg1);
				ToLua.Push(L, o);
				int arrayLength = o.Length;
				LuaScriptMgr.Push(L, arrayLength);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 2;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.GetPixels");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPixels(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.SetPixels");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.Color[] arg0 = ToLua.CheckObjectArray<UnityEngine.Color>(L, 2);
				UnityEngine.CubemapFace arg1 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 3);
				obj.SetPixels(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 4)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.Color[] arg0 = ToLua.CheckObjectArray<UnityEngine.Color>(L, 2);
				UnityEngine.CubemapFace arg1 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.SetPixels(arg0, arg1, arg2);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.SetPixels");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearRequestedMipmapLevel(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.ClearRequestedMipmapLevel");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
			obj.ClearRequestedMipmapLevel();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRequestedMipmapLevelLoaded(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.IsRequestedMipmapLevelLoaded");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
			bool o = obj.IsRequestedMipmapLevelLoaded();
			LuaDLL.lua_pushboolean(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateExternalTexture(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.CreateExternalTexture");
#endif
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.TextureFormat arg1 = (UnityEngine.TextureFormat)LuaDLL.luaL_checknumber(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			System.IntPtr arg3 = (System.IntPtr)LuaDLL.lua_touserdata(L, 4);
			UnityEngine.Cubemap o = UnityEngine.Cubemap.CreateExternalTexture(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPixel(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.SetPixel");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Color arg3 = ToLua.ToColor(L, 5);
				obj.SetPixel(arg0, arg1, arg2, arg3);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 6)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Color arg3 = ToLua.ToColor(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				obj.SetPixel(arg0, arg1, arg2, arg3, arg4);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.SetPixel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPixel(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.GetPixel");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Color o = obj.GetPixel(arg0, arg1, arg2);
				ToLua.Push(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				UnityEngine.CubemapFace arg0 = (UnityEngine.CubemapFace)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Color o = obj.GetPixel(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 1;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.GetPixel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.Apply");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				obj.Apply();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Apply(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Cubemap obj = (UnityEngine.Cubemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Cubemap));
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Apply(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Cubemap.Apply");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.op_Equality");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_format(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.format");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			UnityEngine.TextureFormat ret = obj.format;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index format on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isReadable(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.isReadable");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			bool ret = obj.isReadable;
			LuaDLL.lua_pushboolean(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isReadable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_streamingMipmaps(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.streamingMipmaps");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			bool ret = obj.streamingMipmaps;
			LuaDLL.lua_pushboolean(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index streamingMipmaps on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_streamingMipmapsPriority(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.streamingMipmapsPriority");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int ret = obj.streamingMipmapsPriority;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index streamingMipmapsPriority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_requestedMipmapLevel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.requestedMipmapLevel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int ret = obj.requestedMipmapLevel;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index requestedMipmapLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_desiredMipmapLevel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.desiredMipmapLevel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int ret = obj.desiredMipmapLevel;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index desiredMipmapLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadingMipmapLevel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.loadingMipmapLevel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int ret = obj.loadingMipmapLevel;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loadingMipmapLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadedMipmapLevel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.loadedMipmapLevel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int ret = obj.loadedMipmapLevel;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loadedMipmapLevel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_requestedMipmapLevel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Cubemap.requestedMipmapLevel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Cubemap obj = (UnityEngine.Cubemap)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.requestedMipmapLevel = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index requestedMipmapLevel on a nil value" : e.Message);
		}
	}
}

