//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LightBakingOutputWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.LightBakingOutput), typeof(System.Object), "LightBakingOutput");
		L.RegFunction("New", _CreateUnityEngine_LightBakingOutput);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("probeOcclusionLightIndex", get_probeOcclusionLightIndex, set_probeOcclusionLightIndex);
		L.RegVar("occlusionMaskChannel", get_occlusionMaskChannel, set_occlusionMaskChannel);
		L.RegVar("lightmapBakeType", get_lightmapBakeType, set_lightmapBakeType);
		L.RegVar("mixedLightingMode", get_mixedLightingMode, set_mixedLightingMode);
		L.RegVar("isBaked", get_isBaked, set_isBaked);
		L.RegFunction("GetClassType", GetClassType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_LightBakingOutput(IntPtr L)
	{
		UnityEngine.LightBakingOutput obj = new UnityEngine.LightBakingOutput();
		ToLua.PushValue(L, obj);
		return 1;
	}

	static Type classType = typeof(UnityEngine.LightBakingOutput);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_probeOcclusionLightIndex(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.probeOcclusionLightIndex");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			int ret = obj.probeOcclusionLightIndex;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index probeOcclusionLightIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_occlusionMaskChannel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.occlusionMaskChannel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			int ret = obj.occlusionMaskChannel;
			LuaDLL.lua_pushinteger(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index occlusionMaskChannel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lightmapBakeType(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.lightmapBakeType");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			UnityEngine.LightmapBakeType ret = obj.lightmapBakeType;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lightmapBakeType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mixedLightingMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.mixedLightingMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			UnityEngine.MixedLightingMode ret = obj.mixedLightingMode;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mixedLightingMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBaked(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.isBaked");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			bool ret = obj.isBaked;
			LuaDLL.lua_pushboolean(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isBaked on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_probeOcclusionLightIndex(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.probeOcclusionLightIndex");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.probeOcclusionLightIndex = arg0;
			ToLua.SetBack(L, 1, obj);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index probeOcclusionLightIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_occlusionMaskChannel(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.occlusionMaskChannel");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.occlusionMaskChannel = arg0;
			ToLua.SetBack(L, 1, obj);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index occlusionMaskChannel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lightmapBakeType(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.lightmapBakeType");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			UnityEngine.LightmapBakeType arg0 = (UnityEngine.LightmapBakeType)LuaDLL.luaL_checknumber(L, 2);
			obj.lightmapBakeType = arg0;
			ToLua.SetBack(L, 1, obj);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lightmapBakeType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mixedLightingMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.mixedLightingMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			UnityEngine.MixedLightingMode arg0 = (UnityEngine.MixedLightingMode)LuaDLL.luaL_checknumber(L, 2);
			obj.mixedLightingMode = arg0;
			ToLua.SetBack(L, 1, obj);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mixedLightingMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isBaked(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.LightBakingOutput.isBaked");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.LightBakingOutput obj = (UnityEngine.LightBakingOutput)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isBaked = arg0;
			ToLua.SetBack(L, 1, obj);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isBaked on a nil value" : e.Message);
		}
	}
}

