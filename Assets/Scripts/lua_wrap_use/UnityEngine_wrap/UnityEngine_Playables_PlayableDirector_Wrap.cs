//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Playables_PlayableDirectorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Playables.PlayableDirector), typeof(UnityEngine.Behaviour), "PlayableDirector");
		L.RegFunction("DeferredEvaluate", DeferredEvaluate);
		L.RegFunction("Play", Play);
		L.RegFunction("SetGenericBinding", SetGenericBinding);
		L.RegFunction("Evaluate", Evaluate);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Resume", Resume);
		L.RegFunction("RebuildGraph", RebuildGraph);
		L.RegFunction("ClearReferenceValue", ClearReferenceValue);
		L.RegFunction("SetReferenceValue", SetReferenceValue);
		L.RegFunction("GetReferenceValue", GetReferenceValue);
		L.RegFunction("GetGenericBinding", GetGenericBinding);
		L.RegFunction("ClearGenericBinding", ClearGenericBinding);
		L.RegFunction("RebindPlayableGraphOutputs", RebindPlayableGraphOutputs);
		L.RegFunction("New", _CreateUnityEngine_Playables_PlayableDirector);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("state", get_state, null);
		L.RegVar("extrapolationMode", get_extrapolationMode, set_extrapolationMode);
		L.RegVar("playableAsset", get_playableAsset, set_playableAsset);
		L.RegVar("playableGraph", get_playableGraph, null);
		L.RegVar("playOnAwake", get_playOnAwake, set_playOnAwake);
		L.RegVar("timeUpdateMode", get_timeUpdateMode, set_timeUpdateMode);
		L.RegVar("time", get_time, set_time);
		L.RegVar("initialTime", get_initialTime, set_initialTime);
		L.RegVar("duration", get_duration, null);
		L.RegVar("played", get_played, set_played);
		L.RegVar("paused", get_paused, set_paused);
		L.RegVar("stopped", get_stopped, set_stopped);
		L.RegFunction("GetClassType", GetClassType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Playables_PlayableDirector(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Playables.PlayableDirector obj = new UnityEngine.Playables.PlayableDirector();
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Playables.PlayableDirector.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	static Type classType = typeof(UnityEngine.Playables.PlayableDirector);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeferredEvaluate(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.DeferredEvaluate");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.DeferredEvaluate();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.Play");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
				obj.Play();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
				UnityEngine.Playables.PlayableAsset arg0 = (UnityEngine.Playables.PlayableAsset)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Playables.PlayableAsset));
				obj.Play(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
				UnityEngine.Playables.PlayableAsset arg0 = (UnityEngine.Playables.PlayableAsset)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Playables.PlayableAsset));
				UnityEngine.Playables.DirectorWrapMode arg1 = (UnityEngine.Playables.DirectorWrapMode)LuaDLL.luaL_checknumber(L, 3);
				obj.Play(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Playables.PlayableDirector.Play");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGenericBinding(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.SetGenericBinding");
#endif
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Object));
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.Object));
			obj.SetGenericBinding(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Evaluate(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.Evaluate");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.Evaluate();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.Stop");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.Stop();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.Pause");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.Pause();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resume(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.Resume");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.Resume();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RebuildGraph(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.RebuildGraph");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.RebuildGraph();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearReferenceValue(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.ClearReferenceValue");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.PropertyName arg0 = StackTraits<UnityEngine.PropertyName>.Check(L, 2);
			obj.ClearReferenceValue(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetReferenceValue(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.SetReferenceValue");
#endif
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.PropertyName arg0 = StackTraits<UnityEngine.PropertyName>.Check(L, 2);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.Object));
			obj.SetReferenceValue(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReferenceValue(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.GetReferenceValue");
#endif
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.PropertyName arg0 = StackTraits<UnityEngine.PropertyName>.Check(L, 2);
			bool arg1;
			UnityEngine.Object o = obj.GetReferenceValue(arg0, out arg1);
			ToLua.Push(L, o);
			LuaDLL.lua_pushboolean(L, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGenericBinding(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.GetGenericBinding");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Object));
			UnityEngine.Object o = obj.GetGenericBinding(arg0);
			ToLua.Push(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGenericBinding(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.ClearGenericBinding");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Object));
			obj.ClearGenericBinding(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RebindPlayableGraphOutputs(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.RebindPlayableGraphOutputs");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			obj.RebindPlayableGraphOutputs();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.op_Equality");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_state(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.state");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.PlayState ret = obj.state;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index state on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_extrapolationMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.extrapolationMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.DirectorWrapMode ret = obj.extrapolationMode;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index extrapolationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playableAsset(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.playableAsset");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.PlayableAsset ret = obj.playableAsset;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playableAsset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playableGraph(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.playableGraph");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.PlayableGraph ret = obj.playableGraph;
			ToLua.PushValue(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playableGraph on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playOnAwake(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.playOnAwake");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			bool ret = obj.playOnAwake;
			LuaDLL.lua_pushboolean(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playOnAwake on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeUpdateMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.timeUpdateMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.DirectorUpdateMode ret = obj.timeUpdateMode;
			ToLua.Push(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index timeUpdateMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_time(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.time");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			double ret = obj.time;
			LuaDLL.lua_pushnumber(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_initialTime(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.initialTime");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			double ret = obj.initialTime;
			LuaDLL.lua_pushnumber(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index initialTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_duration(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.duration");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			double ret = obj.duration;
			LuaDLL.lua_pushnumber(L, ret);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index duration on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_played(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UnityEngine.Playables.PlayableDirector.played"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_paused(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UnityEngine.Playables.PlayableDirector.paused"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_stopped(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UnityEngine.Playables.PlayableDirector.stopped"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_extrapolationMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.extrapolationMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.DirectorWrapMode arg0 = (UnityEngine.Playables.DirectorWrapMode)LuaDLL.luaL_checknumber(L, 2);
			obj.extrapolationMode = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index extrapolationMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playableAsset(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.playableAsset");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.PlayableAsset arg0 = (UnityEngine.Playables.PlayableAsset)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Playables.PlayableAsset));
			obj.playableAsset = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playableAsset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playOnAwake(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.playOnAwake");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.playOnAwake = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playOnAwake on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timeUpdateMode(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.timeUpdateMode");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			UnityEngine.Playables.DirectorUpdateMode arg0 = (UnityEngine.Playables.DirectorUpdateMode)LuaDLL.luaL_checknumber(L, 2);
			obj.timeUpdateMode = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index timeUpdateMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_time(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.time");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.time = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_initialTime(IntPtr L)
	{
		object o = null;

		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Playables.PlayableDirector.initialTime");
#endif
			o = ToLua.ToObject(L, 1);
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)o;
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.initialTime = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index initialTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_played(IntPtr L)
	{
		try
		{
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityEngine.Playables.PlayableDirector.played' can only appear on the left hand side of += or -= when used outside of the type 'UnityEngine.Playables.PlayableDirector'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Playables.PlayableDirector>), arg0.func);
				obj.played += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)LuaMisc.GetEventHandler(obj, typeof(UnityEngine.Playables.PlayableDirector), "played");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.Playables.PlayableDirector>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.played -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_paused(IntPtr L)
	{
		try
		{
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityEngine.Playables.PlayableDirector.paused' can only appear on the left hand side of += or -= when used outside of the type 'UnityEngine.Playables.PlayableDirector'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Playables.PlayableDirector>), arg0.func);
				obj.paused += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)LuaMisc.GetEventHandler(obj, typeof(UnityEngine.Playables.PlayableDirector), "paused");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.Playables.PlayableDirector>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.paused -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_stopped(IntPtr L)
	{
		try
		{
			UnityEngine.Playables.PlayableDirector obj = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.PlayableDirector));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityEngine.Playables.PlayableDirector.stopped' can only appear on the left hand side of += or -= when used outside of the type 'UnityEngine.Playables.PlayableDirector'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Playables.PlayableDirector>), arg0.func);
				obj.stopped += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<UnityEngine.Playables.PlayableDirector> ev = (System.Action<UnityEngine.Playables.PlayableDirector>)LuaMisc.GetEventHandler(obj, typeof(UnityEngine.Playables.PlayableDirector), "stopped");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.Action<UnityEngine.Playables.PlayableDirector>)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.stopped -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

