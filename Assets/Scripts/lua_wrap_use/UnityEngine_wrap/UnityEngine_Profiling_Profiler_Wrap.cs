//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Profiling_ProfilerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Profiling.Profiler), typeof(System.Object), "Profiler");
		L.RegFunction("SetAreaEnabled", SetAreaEnabled);
		L.RegFunction("AddFramesFromFile", AddFramesFromFile);
		L.RegFunction("BeginThreadProfiling", BeginThreadProfiling);
		L.RegFunction("BeginSample", BeginSample);
		L.RegFunction("EndSample", EndSample);
		L.RegFunction("GetRuntimeMemorySizeLong", GetRuntimeMemorySizeLong);
		L.RegFunction("GetMonoHeapSizeLong", GetMonoHeapSizeLong);
		L.RegFunction("GetMonoUsedSizeLong", GetMonoUsedSizeLong);
		L.RegFunction("EmitFrameMetaData", EmitFrameMetaData);
		L.RegFunction("EmitSessionMetaData", EmitSessionMetaData);
		L.RegFunction("SetCategoryEnabled", SetCategoryEnabled);
		L.RegFunction("IsCategoryEnabled", IsCategoryEnabled);
		L.RegFunction("GetAllCategories", GetAllCategories);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("supported", get_supported, null);
		L.RegVar("logFile", get_logFile, set_logFile);
		L.RegVar("enableBinaryLog", get_enableBinaryLog, set_enableBinaryLog);
		L.RegVar("maxUsedMemory", get_maxUsedMemory, set_maxUsedMemory);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("enableAllocationCallstacks", get_enableAllocationCallstacks, set_enableAllocationCallstacks);
		L.RegVar("areaCount", get_areaCount, null);
		L.RegVar("usedHeapSizeLong", get_usedHeapSizeLong, null);
		L.RegFunction("GetClassType", GetClassType);
		L.EndClass();
	}

	static Type classType = typeof(UnityEngine.Profiling.Profiler);

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		ToLua.Push(L, classType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAreaEnabled(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.SetAreaEnabled");
#endif
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Profiling.ProfilerArea arg0 = (UnityEngine.Profiling.ProfilerArea)LuaDLL.luaL_checknumber(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.SetAreaEnabled(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFramesFromFile(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.AddFramesFromFile");
#endif
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Profiling.Profiler.AddFramesFromFile(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginThreadProfiling(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.BeginThreadProfiling");
#endif
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.Profiling.Profiler.BeginThreadProfiling(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginSample(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.BeginSample");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Profiling.Profiler.BeginSample(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Object));
				UnityEngine.Profiling.Profiler.BeginSample(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Profiling.Profiler.BeginSample");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndSample(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.EndSample");
#endif
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Profiling.Profiler.EndSample();
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRuntimeMemorySizeLong(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.GetRuntimeMemorySizeLong");
#endif
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Object));
			long o = UnityEngine.Profiling.Profiler.GetRuntimeMemorySizeLong(arg0);
			LuaDLL.lua_pushnumber(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMonoHeapSizeLong(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.GetMonoHeapSizeLong");
#endif
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetMonoHeapSizeLong();
			LuaDLL.lua_pushnumber(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMonoUsedSizeLong(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.GetMonoUsedSizeLong");
#endif
			ToLua.CheckArgsCount(L, 0);
			long o = UnityEngine.Profiling.Profiler.GetMonoUsedSizeLong();
			LuaDLL.lua_pushnumber(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EmitFrameMetaData(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.EmitFrameMetaData");
#endif
			ToLua.CheckArgsCount(L, 3);
			System.Guid arg0 = StackTraits<System.Guid>.Check(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Array arg2 = (System.Array)ToLua.CheckObject(L, 3, typeof(System.Array));
			UnityEngine.Profiling.Profiler.EmitFrameMetaData(arg0, arg1, arg2);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EmitSessionMetaData(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.EmitSessionMetaData");
#endif
			ToLua.CheckArgsCount(L, 3);
			System.Guid arg0 = StackTraits<System.Guid>.Check(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Array arg2 = (System.Array)ToLua.CheckObject(L, 3, typeof(System.Array));
			UnityEngine.Profiling.Profiler.EmitSessionMetaData(arg0, arg1, arg2);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCategoryEnabled(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.SetCategoryEnabled");
#endif
			ToLua.CheckArgsCount(L, 2);
			Unity.Profiling.ProfilerCategory arg0 = StackTraits<Unity.Profiling.ProfilerCategory>.Check(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.SetCategoryEnabled(arg0, arg1);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCategoryEnabled(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.IsCategoryEnabled");
#endif
			ToLua.CheckArgsCount(L, 1);
			Unity.Profiling.ProfilerCategory arg0 = StackTraits<Unity.Profiling.ProfilerCategory>.Check(L, 1);
			bool o = UnityEngine.Profiling.Profiler.IsCategoryEnabled(arg0);
			LuaDLL.lua_pushboolean(L, o);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllCategories(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.GetAllCategories");
#endif
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Unity.Profiling.ProfilerCategory[])))
			{
				Unity.Profiling.ProfilerCategory[] arg0 = ToLua.CheckObjectArray<Unity.Profiling.ProfilerCategory>(L, 1);
				UnityEngine.Profiling.Profiler.GetAllCategories(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Unity.Collections.NativeArray<Unity.Profiling.ProfilerCategory>)))
			{
				Unity.Collections.NativeArray<Unity.Profiling.ProfilerCategory> arg0 = StackTraits<Unity.Collections.NativeArray<Unity.Profiling.ProfilerCategory>>.To(L, 1);
				UnityEngine.Profiling.Profiler.GetAllCategories(arg0);
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
				//UIProfiler.End();
#endif
				return 0;
			}
			else
			{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Profiling.Profiler.GetAllCategories");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supported(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.supported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logFile(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, UnityEngine.Profiling.Profiler.logFile);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableBinaryLog(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.enableBinaryLog);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxUsedMemory(IntPtr L)
	{
		LuaDLL.lua_pushinteger(L, UnityEngine.Profiling.Profiler.maxUsedMemory);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.enabled);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableAllocationCallstacks(IntPtr L)
	{
		LuaDLL.lua_pushboolean(L, UnityEngine.Profiling.Profiler.enableAllocationCallstacks);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_areaCount(IntPtr L)
	{
		LuaDLL.lua_pushinteger(L, UnityEngine.Profiling.Profiler.areaCount);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usedHeapSizeLong(IntPtr L)
	{
		LuaDLL.lua_pushnumber(L, UnityEngine.Profiling.Profiler.usedHeapSizeLong);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logFile(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.logFile");
#endif
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Profiling.Profiler.logFile = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableBinaryLog(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.enableBinaryLog");
#endif
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.enableBinaryLog = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxUsedMemory(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.maxUsedMemory");
#endif
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Profiling.Profiler.maxUsedMemory = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.enabled");
#endif
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.enabled = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableAllocationCallstacks(IntPtr L)
	{
		try
		{
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.Begin("UnityEngine.Profiling.Profiler.enableAllocationCallstacks");
#endif
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Profiling.Profiler.enableAllocationCallstacks = arg0;
#if ENABLE_PROFILER || UNITY_EDITOR || UNITY_STANDALONE_WIN
			//UIProfiler.End();
#endif
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

